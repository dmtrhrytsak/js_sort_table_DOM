{"version":3,"sources":["scripts/main.js"],"names":["table","document","querySelector","tableBody","tBodies","tableRows","querySelectorAll","getSalary","salary","replace","sortRowBy","header","sort","rowA","rowB","cells","innerText","localeCompare","Error","tHead","addEventListener","e","target","append"],"mappings":";AAAA,aA2CA,SAAA,EAAA,GAAA,OAAA,EAAA,IAAA,EAAA,IAAA,EAAA,IAAA,IAAA,SAAA,IAAA,MAAA,IAAA,UAAA,wIAAA,SAAA,EAAA,EAAA,GAAA,GAAA,EAAA,CAAA,GAAA,iBAAA,EAAA,OAAA,EAAA,EAAA,GAAA,IAAA,EAAA,OAAA,UAAA,SAAA,KAAA,GAAA,MAAA,GAAA,GAAA,MAAA,WAAA,GAAA,EAAA,cAAA,EAAA,EAAA,YAAA,MAAA,QAAA,GAAA,QAAA,EAAA,MAAA,KAAA,GAAA,cAAA,GAAA,2CAAA,KAAA,GAAA,EAAA,EAAA,QAAA,GAAA,SAAA,EAAA,GAAA,GAAA,oBAAA,QAAA,OAAA,YAAA,OAAA,GAAA,OAAA,MAAA,KAAA,GAAA,SAAA,EAAA,GAAA,GAAA,MAAA,QAAA,GAAA,OAAA,EAAA,GAAA,SAAA,EAAA,EAAA,IAAA,MAAA,GAAA,EAAA,EAAA,UAAA,EAAA,EAAA,QAAA,IAAA,IAAA,EAAA,EAAA,EAAA,IAAA,MAAA,GAAA,EAAA,EAAA,IAAA,EAAA,GAAA,EAAA,GAAA,OAAA,EAzCA,IAAMA,EAAQC,SAASC,cAAc,SAC/BC,EAAYH,EAAMI,QAAQ,GAC1BC,EAAgBF,EAAAA,EAAUG,iBAAiB,OAE3CC,EAAY,SAACC,GACVA,OAAAA,EAAOC,QAAQ,QAAS,KAGjC,SAASC,EAAUC,GACTA,OAAAA,GACD,IAAA,OACHN,EAAUO,KAAK,SAACC,EAAMC,GACpBD,OAAAA,EAAKE,MAAM,GAAGC,UAAUC,cAAcH,EAAKC,MAAM,GAAGC,aAEtD,MAEG,IAAA,WACHX,EAAUO,KAAK,SAACC,EAAMC,GACpBD,OAAAA,EAAKE,MAAM,GAAGC,UAAUC,cAAcH,EAAKC,MAAM,GAAGC,aAEtD,MAEG,IAAA,MACHX,EAAUO,KACR,SAACC,EAAMC,GAASD,OAAAA,EAAKE,MAAM,GAAGC,UAAYF,EAAKC,MAAM,GAAGC,YAE1D,MAEG,IAAA,SACHX,EAAUO,KACR,SAACC,EAAMC,GACLP,OAAAA,EAAUM,EAAKE,MAAM,GAAGC,WACtBT,EAAUO,EAAKC,MAAM,GAAGC,aAE9B,MAEF,QACQE,MAAAA,MAAM,+BAIlBlB,EAAMmB,MAAMC,iBAAiB,QAAS,SAACC,GAGrCX,EAFoBW,EAAEC,OAAON,WAG7Bb,EAAUoB,OAAVpB,MAAAA,EAAoBE,EAAAA","file":"main.d21e93c4.js","sourceRoot":"..\\src","sourcesContent":["'use strict';\n\nconst table = document.querySelector('table');\nconst tableBody = table.tBodies[0];\nconst tableRows = [...tableBody.querySelectorAll('tr')];\n\nconst getSalary = (salary) => {\n  return salary.replace(/[$,]/g, '');\n};\n\nfunction sortRowBy(header) {\n  switch (header) {\n    case 'Name':\n      tableRows.sort((rowA, rowB) =>\n        rowA.cells[0].innerText.localeCompare(rowB.cells[0].innerText)\n      );\n      break;\n\n    case 'Position':\n      tableRows.sort((rowA, rowB) =>\n        rowA.cells[1].innerText.localeCompare(rowB.cells[1].innerText)\n      );\n      break;\n\n    case 'Age':\n      tableRows.sort(\n        (rowA, rowB) => rowA.cells[2].innerText - rowB.cells[2].innerText\n      );\n      break;\n\n    case 'Salary':\n      tableRows.sort(\n        (rowA, rowB) =>\n          getSalary(rowA.cells[3].innerText)\n          - getSalary(rowB.cells[3].innerText)\n      );\n      break;\n\n    default:\n      throw Error('Unknown option for sorting');\n  }\n}\n\ntable.tHead.addEventListener('click', (e) => {\n  const tableHeader = e.target.innerText;\n\n  sortRowBy(tableHeader);\n  tableBody.append(...tableRows);\n});\n"]}